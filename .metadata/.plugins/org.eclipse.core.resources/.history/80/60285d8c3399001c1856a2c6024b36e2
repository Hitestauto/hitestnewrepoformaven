package esconsumer_usersite.baseclass;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.Select;

import io.github.bonigarcia.wdm.WebDriverManager;


/**
 * Description-
 * This Class is used to contains reusing method like browser method, launch URL
 * load properties file, load excel data file, Waits class etc
 * 
 * @author Sunil Kashyap
 *
 * 25 Sep, 2020
 */
public class BaseClass {
	
	@FindBy(xpath = "//button[@id='details-button']") WebElement advanceBtn;
	@FindBy(id = "proceed-link") WebElement proceedLink;
	
	public WebDriver driver;
	public static Properties prop;
	public static XSSFWorkbook workbook;
	public static XSSFSheet sheet;
	public static XSSFRow row;
	public static XSSFCell cell;
	public static Select select;
	public static String currentURL;
	public static String urls=null;
	
	/**
	 * This method is used to load properties files
	 * @param str
	 */
	public static void loadPropertiesFiles(String str) {
		
		try {	
			prop=new Properties();	
			prop.load(new FileInputStream(System.getProperty("user.dir")+str));	
				
		} catch (Exception e) {
			System.out.println("File not found"+e.getMessage());
		}
	}
	
	/**
	 * Load test data file in this method 
	 */
	public static void loadTestDataFile() {
		
		String testdatafilepath="/ESConsumer_UserSite/main/esconsumer_usersite/config/testData.properties";
		loadPropertiesFiles(testdatafilepath);
	}
	
	/**
	 *  Load Query file in this method
	 */
	public static void queryfile() {
		
		String queryfilepath="/ESConsumer_UserSite/main/esconsumer_usersite/config/queries.properties";
		loadPropertiesFiles(queryfilepath);
	}
	
	/**
	 * This method is used to load excel sheet file and get data from it
	 * 
	 * @param sheetName
	 * @param rowNo
	 * @param cellNo
	 * @return
	 * @throws IOException
	 */
	public static String readExcelData(String sheetName, int rowNo,int cellNo) throws IOException {
		
		String str = null;
		File file=new File(System.getProperty("user.dir")+"/ESConsumer_UserSite/main/esconsumer_usersite/exceldata/ESConsumer.xlsx");
		                    
		try {
			FileInputStream fis=new FileInputStream(file);
			workbook= new XSSFWorkbook(fis);
				
		} catch (FileNotFoundException e) {
			System.out.println("Excel File not loaded "+e.getMessage());
		}
		
		cell=workbook.getSheet(sheetName).getRow(rowNo).getCell(cellNo);

		switch (cell.getCellType())
        {
            case STRING:    //field that represents string cell type
                str = cell.getStringCellValue();
                break;
            case NUMERIC:    //field that represents number cell type            
                str = (long) cell.getNumericCellValue()+"";
                break;
//              case BOOLEAN:    //field that represents boolean cell type  
//            	bValue = cell.getBooleanCellValue();
                default:
    
        }
		return str;
	} 

	//launching browser 
	public void browser(String browser) {
		
		if(browser.equalsIgnoreCase("chrome")) {
			WebDriverManager.chromedriver().setup();	
			driver=new ChromeDriver();
			}
		else if(browser.equalsIgnoreCase("firefox")) {	
			WebDriverManager.firefoxdriver().setup();
			driver=new FirefoxDriver();
		    }
		else {
			System.out.println("Please choose browser type");
		}
		
		maximizeBrowser();
		deleteCookies();
	}
	
	// maximize browser
	public void maximizeBrowser() {
		
		driver.manage().window().maximize();
	}
	
	//delete cockies
	public void deleteCookies() {
		
		driver.manage().deleteAllCookies();
	}
	
	// launching url
	public String launchURL(String url) {
		loadTestDataFile();
		if(url.equalsIgnoreCase("stg")) {
			driver.navigate().to(prop.getProperty("StgURL"));
	//		clickOnAdvanceSettingInBrowser();
			BaseClass.sleep(2000);
			currentURL= driver.getCurrentUrl();
			return urls="Stg";
		}
		else if(url.equalsIgnoreCase("prod")){
			driver.navigate().to(prop.getProperty("ProdURL"));
	//		clickOnAdvanceSettingInBrowser();
			BaseClass.sleep(2000);
			currentURL= driver.getCurrentUrl();
			return urls="Prod";
		}
		else {
			System.out.println("Please enter URL");
			return "Please enter URL";
		}
	}
	
	//Select method to select Text
	public static void selectByvisibletext(WebElement locators,String text) {
			
		select=new Select(locators);
		select.selectByVisibleText(text);
	}
	//Select method - to select by index
	public static void selectByIndex(WebElement locators,int indexNo) {
		select =new Select(locators);
		select.selectByIndex(indexNo);;
	}
	// Select method - to select by value
	public static void selectByValue(WebElement locators,String value) {
		select= new Select(locators);
		select.selectByValue(value);
			
	}
	public static String getFirstSelectOptions(WebElement locators) {
		select= new Select(locators);
		return select.getFirstSelectedOption().getText();
	}
	public static void implicitilyWait(WebDriver driver,int times) {
		
		driver.manage().timeouts().implicitlyWait(times, TimeUnit.SECONDS);
	}
	
	public static void sleep(int time ) {
		try {
			Thread.sleep(time);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	public void clickOnAdvanceSettingInBrowser() {
		
		boolean isAdvanceBtnDispay=advanceBtn.isDisplayed();
		try {
			if(isAdvanceBtnDispay==true) {
				advanceBtn.click();
				sleep(1000);
				proceedLink.click();
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	/**
	 * Generating random alphanumeric string size up to 10 characters
	 * @return
	 */
	public static String generateRandomChars() {
		String candidateChars="ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
	    StringBuilder sb = new StringBuilder();
	    Random random = new Random();
	    for (int i = 0; i < 10; i++) {
	        sb.append(candidateChars.charAt(random.nextInt(candidateChars
	                .length())));
	    }
	    return sb.toString();
	}

}
